{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCFSC,EAdF,SAACC,GAEV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAM,SAASC,IAAG,+BAA2BH,EAAMI,GAAjC,cACvB,yBAAKH,UAAU,MACX,4BAAKD,EAAMK,MACV,2BAAIL,EAAMM,UCgBZC,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGnB,OACQ,6BAERA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,kBAAC,EAAD,CAAMC,IAAKD,EACJP,GAAMI,EAAOG,GAAGP,GAChBC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCATO,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACN,2BACAC,KAAM,SACNC,YAAY,gBACZf,UAAU,4CACVgB,SAAWH,MCAEI,EARA,SAAClB,GAChB,OACA,yBAAKmB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC1DtB,EAAMuB,WCmBIC,E,YArBX,WAAYxB,GAAO,IAAD,8BACd,4CAAMA,KACDyB,MAAQ,CACXC,UAAU,GAHE,E,+EAOJC,EAAOC,GACzBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKpB,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAK7B,MAAMuB,a,GAjBMQ,aCkDbC,G,kBA1CX,aAAe,IAAD,8BACV,+CAcRC,eAAe,SAACC,GACZ,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdrC,EAAKZ,MAAQ,CACTjB,OAAO,GACP2B,YAAa,IAJP,E,iFAQM,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAS,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BASjC,IAAD,EAC4Bb,KAAKJ,MAA7BjB,EADJ,EACIA,OAAQ2B,EADZ,EACYA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACzC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAGjD,OAAQtC,EAAOwC,OAGX,yBAAK/C,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUzB,OAAUmC,OAP7B,2C,GA7BUZ,cCClBkB,IAASC,OACM,kBAAC,EAAD,MAAUC,SAASC,eAAe,SPyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.d04c159e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) =>{\n\n    return (\n        <div className='bg-light-green dib pa0 ma3 br3 grow bw2 shadow-5'>\n            <img alt = 'robots' src ={`https://robohash.org/${props.id}?150x150`} />\n            <div className='tc'>\n                <h2>{props.name}</h2>\n                 <p>{props.email}</p>\n            </div>  \n        </div>\n       \n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\n\nconst CardList = ({robots}) => {\n\n   \nreturn (\n        <div>\n             {\nrobots.map((user,i)=>{\nreturn  (\n<Card key={i} \n       id = {robots[i].id} \n       name={robots[i].name} \n       email={robots[i].email} />\n);\n\n})\n}\n   </div>\n    );\n\n}\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div >\n  <input \n  type ='search' \n  placeholder='search robots' \n  className='bg-washed-blue h2 pa3 ma3 w-50 h2 br-pill'\n  onChange ={searchChange}\n  />\n</div>\n    )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props)=>{\nreturn (\n<div style={{overflow:'scroll',border:'2px ridge white',height:'800px' }}>\n   { props.children}\n</div>\n);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n          hasError: false  \n        }\n    }\n\ncomponentDidCatch(error, info){\nthis.setState({hasError:true})\n}\n\n\nrender(){\n    if(this.state.hasError){\n     return <h1>Ooops. That is not good</h1>   \n    }\n    return this.props.children\n}\n\n}\n\nexport default ErrorBoundary;","import React,{Component} from 'react'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css'\n\n\nclass App extends Component { \n\n    constructor() {\n        super();\n        this.state = {\n            robots:[],\n            searchField: ''\n        } \n    } \n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(users =>{this.setState({robots: users})});  \n}\n\n// methed create to catct the event when something is typed into the search box\nonSearchChange=(event) =>{\n    this.setState({searchField: event.target.value}) //To change a value in the state object, use the this.setState() method\n    } \n   \n\n    render(){ \n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n   \n        return !robots.length ?\n        <h1>Loading</h1> :\n        ( \n            <div className='tc'>\n            <h1 className='f1'>Robofriends</h1>\n            <SearchBox searchChange={this.onSearchChange} />\n            <Scroll> \n                <ErrorBoundary>\n                 <CardList robots = {filteredRobots}/>\n                </ErrorBoundary> \n            </Scroll>  \n            </div>\n        )\n    } \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\n\nReactDOM.render(\n               <App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}